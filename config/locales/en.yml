# Files in the config/locales directory are used for internationalization
# and are automatically loaded by Rails. If you want to use locales other
# than English, add the necessary files in this directory.
#
# To use the locales, use `I18n.t`:
#
#     I18n.t 'hello'
#
# In views, this is aliased to just `t`:
#
#     <%= t('hello') %>
#
# To use a different locale, set it with `I18n.locale`:
#
#     I18n.locale = :es
#
# This would use the information in config/locales/es.yml.
#
# The following keys must be escaped otherwise they will not be retrieved by
# the default I18n backend:
#
# true, false, on, off, yes, no
#
# Instead, surround them with single quotes.
#
# en:
#   'true': 'foo'
#
# To learn more, please read the Rails Internationalization guide
# available at http://guides.rubyonrails.org/i18n.html.
en:
  opera:
    will_start_soon: 'The task will start in a few seconds.'
    task_performing: "The task execution in progress. The results will appear below once calculations are complete."
    reload_manually: |
      This page will be updated in %{timeout} seconds.
      If it's not done automatically, please click <a href="%{redirect_url}">here</a>.
    ticket_number:
      just_submitted: |
        Please save your ticket number <span class="ticket">%{ticket}</span> to be able to view results later.
      in_queue: |
        Please save your ticket number <span class="ticket">%{ticket}</span> to be able to view results later.<br>
        The task was sheduled at %{time_scheduled} and is waiting in queue.
        <!-- тут бы хорошо еще вставить (your place in queue: X). -->
      in_process: |
        Please save your ticket number <span class="ticket">%{ticket}</span> to be able to view results later.<br>
        The task was sheduled at %{time_scheduled} and started at %{time_started}.
      finished: |
        Please save your ticket number <span class="ticket">%{ticket}</span> to be able to view results later.<br>
        Your task was completed at %{time_finished}.
  task_layout:
    download_results: 'Results'
    task_details: 'Task execution details'
  enumerize:
    data_model:
      data_model:
        PCM: 'PCM'
        PWM: 'PWM'
        PPM: 'PPM'
    background:
      mode:
        wordwise: 'None: exact word counts'
        gc_content: 'GC-content'
        frequencies: 'Frequencies'
    collection:
      hocomoco: 'HOCOMOCO-9'
      hocomoco_10_human: 'HOCOMOCO-10 (human)'
      hocomoco_10_mouse: 'HOCOMOCO-10 (mouse)'
      hocomoco_11_human: 'HOCOMOCO-11 (human)'
      hocomoco_11_mouse: 'HOCOMOCO-11 (mouse)'
      hocomoco_12_core: 'HOCOMOCO-12 (H12CORE)'
      hocomoco_12_rsnp: 'HOCOMOCO-12 (H12RSNP)'
      hocomoco_12_rsnp_hq: 'HOCOMOCO-12 (H12RSNP-HQ)'
      hocomoco_12_invivo: 'HOCOMOCO-12 (H12INVIVO)'
      hocomoco_12_invitro: 'HOCOMOCO-12 (H12INVITRO)'
      jaspar: 'JASPAR'
      selex: 'HT-SELEX'
      swissregulon: 'SwissRegulon'
      homer: 'HOMER'
    pvalue_boundary:
      lower: 'Lower'
      upper: 'Upper'
    gc_content:
      auto: 'Auto-detect'
      uniform: 'Uniform'
    motif_type:
        PCM: 'PCM'
        PWM: 'PWM'
        PPM: 'PPM'
    sequence_weighting_mode:
      simple: 'Simple'
      peak: 'Peak'
      weighted: 'Weighted'
      simple_single_stranded: 'Single strand (RNA)'
    occurences_per_sequence:
      oops: 'OOPS'
      zoops: 'ZOOPS'
    speed_mode:
      fast: 'Fast'
      precise: 'Precise'
    motif_shape_prior:
      flat: 'flat'
      single: 'single'
      double: 'double'
  task_descriptions:
    EvaluateSimilarity: 'Evaluate Jaccard similarity between two TFBS models (motifs).'
    ScanCollection: 'Scan a collection for TFBS models (motifs) similar to a given query.'
    SnpScan: 'Find TFBS motifs binding alleles of a single-nucleotide variant with different affinity.'
    MotifDiscovery: 'De novo motif discovery in nucleotide sequences.'
    MotifDiscoveryDi: 'De novo dinucleotide motif discovery in nucleotide sequences.'
  task_parameters:
    BackgroundForm:
      mode: |
        Default option is to explicitly count
        uniformly distributed words from a k-mer dictionary (no
        backround). Another option is to use an i.i.d. random model (Bernoulli,
        ACGT-frequencies or GC-concent should be specified).
      gc_content: 'Background defined by GC-content, value should be in 0.0 to 1.0 range.'
      frequencies: |
        Background defined by frequencies of individual
        nucleotides. Values should be in 0.0 to 1.0 range summing up to
        1.0.
    FrequenciesForm:
      a: 'Frequency of A nucleotide.'
      c: 'Frequency of C nucleotide.'
      g: 'Frequency of G nucleotide.'
      t: 'Frequency of T nucleotide.'
    DataModelForm:
      data_model: |
        Data model of the tested motif.
        Can be positional weight matrix&nbsp;(<em>PWM</em>),
        positional count matrix&nbsp;(<em>PCM</em>),
        or positional frequency matrix&nbsp;(<em>PPM</em>).<br/>
        PCM elements can be real numbers (in the
        case original sequences were weighted).<br/>
        PWM elements are assumed to come from a log-odds transformed PCM or PPM.
      matrix: 'Positional matrix of the motif according to its data model.'
      effective_count: 'Effective sample size (an assumed number of sequences) to convert PPM-to-PCM-to-PWM.'
      pseudocount: 'Pseudocount value to convert PCM to PWM, taken as log(words) by default. Positive numeric constant can be used instead of log.'
    Perfectosape:
      ScanForm:
        snp_list: &snp_list |
          List of SNVs entries to be tested. Each entry should be on a separate line.
          Each entry should consist of an SNV name and the variant with
          flanking sequences, e.g.: <br/>
          <tt>rs10040172&nbsp;cagttactga[G/A]tggtacagac</tt><br/>
          It is suggested to use flanking sequences of ~25bps.
        snp_list_text: *snp_list
        snp_list_file: *snp_list
        collection: |
          Collection of transcription factor binding site models (motifs).
          Available collections:
          <a href="https://hocomoco.autosome.org/">HOCOMOCO</a>,
          <a href="https://jaspar.genereg.net/">JASPAR</a>,
          <a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2877582/">HT-SELEX</a>,
          <a href="https://swissregulon.unibas.ch/">SwissRegulon</a>,
          and <a href="http://homer.ucsd.edu/homer/motif/motifDatabase.html">HOMER</a>.
        pvalue_cutoff: "P-value cutoff to treat a DNA subsequence as a TF binding site."
        fold_change_cutoff: "Minimal P-value fold change."
    Macroape:
      ScanForm:
        collection: |
          Collection of transcription factor binding site motifs to scan.
          Available collections:
          <a href="https://hocomoco.autosome.org/">HOCOMOCO</a>,
          <a href="https://jaspar.genereg.net/">JASPAR</a>,
          <a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2877582/">HT-SELEX</a>,
          <a href="https://swissregulon.unibas.ch/">SwissRegulon</a>,
          and <a href="http://homer.ucsd.edu/homer/motif/motifDatabase.html">HOMER</a>.
        pvalue: 'P-value level to select the motif thresholds.'
        pvalue_boundary: 'Upper boundary (default) means that the obtained P-value is greater than or equal to the requested P-value.'
        similarity_cutoff: 'Minimal similarity to report.'
        precise_recalc_cutoff: 'Minimal similarity to recheck in precise mode (with higher discretization level).'
      CompareForm:
        pvalue_boundary: 'Upper boundary (default) means that the obtained P-value is greater than or equal to the requested P-value.'
        pvalue: 'P-value level to select the motif thresholds.'
        discretization: 'PWM discretization.'
    Chipmunk:
      MotifDiscoveryForm:
        sequence_weighting_mode: |
          Use <em>simple/standard</em> mode for basic sequences,<br/>
          <em>weighted</em> mode for sequences with prior reliability data (higher weight = more impact on resulting motif),<br/>
          <em>peak</em> mode for sequences with positional prior data (higher prior values = preferred motif location),<br/>
          <em>single-stranded</em> mode for RNA motif discovery (ATGC alphabet, unweighted).
        sequence_list: &sequence_list |
          Paste a set of sequences in multi-fasta format.<br/>
          See toy examples and the <a href="/downloads/chipmunk-userguide-v6.pdf">program manual</a> for details.
        sequence_list_text: *sequence_list
        sequence_list_file: *sequence_list
        speed_mode: |
          <em>fast</em> - rough mode to quickly check your data for putative pattern.<br/>
          <em>precise</em> - detailed analysis providing more robust results.<br/>
          For practical applications requiring the most precise motif models we suggest the stand-alone version and manual parameter settings.
        max_motif_length: ''
        min_motif_length: ''
        occurences_per_sequence: |
          Occurences per sequence:<br/>
          <em>OOPS</em> - one occurrence per sequence (classic gapless local multiple alignment).<br/>
          <em>ZOOPS</em> - zero or one occurrence per sequence (automatic threshold selection to filter sequences w/o reliable motif occurrences).
        motif_shape_prior: |
          <em>flat</em> - no prior on motif shape;<br/>
          <em>single</em> - single-box motif shape (prefer motifs fitting one DNA helix pitch, motif lengths around 10-11bps are recommended)<br/>
          <em>double</em> - double-box motif shape (prefer motifs with two boxes, longer motif lengths of 15 to 21 are recommended).
        gc_content: |
          Background model. Use <em>auto</em> to estimate nucleotide frequencies from the provided set of input sequences or <em>uniform</em> to treat all nucleotides equiprobable.
        Di:
          gc_content: |
            Background model. Use <em>auto</em> to estimate dinucleotide frequencies from the provided set of input sequences or <em>uniform</em> to treat all dinucleotides equiprobable.

  label:
    Perfectosape:
      ScanForm:
        snp_list_text: 'SNPs with flanking sequences (at least 25 nucleotides from each side):'
        snp_list_file: 'or load a file with SNP-sequences:'
        collection: 'TFBS motif collection:'
        pvalue_cutoff: 'P-value cutoff:'
        fold_change_cutoff: 'Fold change cutoff:'
    Macroape:
      CompareForm:
        pvalue_boundary: 'P-value boundary:'
        discretization: 'Discretization:'
      ScanForm:
        collection: 'Collection:'
        pvalue: 'P-value:'
        pvalue_boundary: 'P-value boundary:'
        similarity_cutoff: 'Similarity cutoff:'
        precise_recalc_cutoff: 'Minimal similarity to recalculate in precise mode:'
        pseudocount: 'Pseudocount:'
    Chipmunk:
      MotifDiscoveryForm:
        sequence_weighting_mode: 'Mode:'
        sequence_list_text: 'Sequence set in extended multi-fasta format:'
        sequence_list_file: 'or load a file with sequences:'
        speed_mode: 'Speed mode:'
        min_motif_length: 'Minimal motif length:'
        max_motif_length: 'Maximal motif length:'
        occurences_per_sequence: 'Occurences per sequence:'
        motif_shape_prior: 'Motif shape prior:'
        gc_content: 'Background GC percent:'
        Di:
          gc_content: 'Background dinucleotide composition:'

  matrices_rounded_hint: 'Rounded version of matrices are shown, download precise version.'
  # The values :model, :attribute and :value are always available for interpolation
  # The value :count is available when applicable. Can be used for pluralization.
  activemodel:
    errors:
      models:
        background_form:
          attributes:
            mode:
              inclusion: "Should be one of the following: wordwise, GC-content, frequencies; the given value was %{value}."
        data_model_form:
          attributes:
            motif_type:
              inclusion: 'Unknown motif type `%{value}`'
  errors:
    format: '<div class="attribute-name">%{attribute}:</div> %{message}'
    attributes:
      collection:
        inclusion: 'Unknown collection name `%{value}`'
      pvalue_boundary:
        inclusion: "Should be either lower or upper; the given value was %{value}."
      # attributes common for many models
  time:
    formats:
      # default: "%a, %d %b %Y %H:%M:%S %z"
      default: "%B %d, %Y %H:%M:%S"
      short: "%d %b %H:%M"
      long: "%B %d, %Y %H:%M"
